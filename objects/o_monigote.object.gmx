<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// cada mitad del monigote va de un color
colorsito[m_izq] = merge_colour(c_red, c_white, 0.5);
colorsito[m_der] = merge_colour(c_blue, c_white, 0.5);

// posicion de las manos
mano_x[m_izq] = x - (m_longitud_pecho + m_longitud_brazo + m_longitud_antebrazo);
mano_x[m_der] = x + (m_longitud_pecho + m_longitud_brazo + m_longitud_antebrazo);
mano_y[m_izq] = y;
mano_y[m_der] = y;

// angulo de las manos
mano_ang[m_izq] = 180;
mano_ang[m_der] = 0;

// posicion de los codos
codo_x[m_izq] = x - (m_longitud_pecho + m_longitud_brazo);
codo_x[m_der] = x + (m_longitud_pecho + m_longitud_brazo);
codo_y[m_izq] = y;
codo_y[m_der] = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// calcular delta de tiempo en segundos
var dlt = min(0.1, delta_time * 0.000001);

// variables de apoyo
var distancia, angulo, velocidad_x, velocidad_y;

// movimiento del cuerpo en conjunto
// encontrar angulo segun teclas direccionales pulsadas
if keyboard_check(vk_up) {
    if keyboard_check(vk_left) {
        angulo = 135;
    }
    else if keyboard_check(vk_right) {
        angulo = 45;
    }
    else {
        angulo = 90;
    }
}
else if keyboard_check(vk_down) {
    if keyboard_check(vk_left) {
        angulo = 225;
    }
    else if keyboard_check(vk_right) {
        angulo = 315;
    }
    else {
        angulo = 270;
    }
}
else {
    if keyboard_check(vk_left) {
        angulo = 180;
    }
    else if keyboard_check(vk_right) {
        angulo = 0;
    }
    else {
        angulo = -1;
        movio_solo = false;
    }
}
// ejecutar el movimiento para cada parte del monigote
if angulo != -1 {
    velocidad_x = lengthdir_x(m_velocidad_mover * dlt, angulo);
    velocidad_y = lengthdir_y(m_velocidad_mover * dlt, angulo);
    x += velocidad_x;
    y += velocidad_y;
    mano_x[m_izq] += velocidad_x;
    mano_y[m_izq] += velocidad_y;
    mano_x[m_der] += velocidad_x;
    mano_y[m_der] += velocidad_y;
    codo_x[m_izq] += velocidad_x;
    codo_y[m_izq] += velocidad_y;
    codo_x[m_der] += velocidad_x;
    codo_y[m_der] += velocidad_y;
}

// movimiento del cuerpo solo
// encontrar angulo segun teclas WASD pulsadas
var movio_solo = true;
if keyboard_check(ord('W')) {
    if keyboard_check(ord('A')) {
        angulo = 135;
    }
    else if keyboard_check(ord('D')) {
        angulo = 45;
    }
    else {
        angulo = 90;
    }
}
else if keyboard_check(ord('S')) {
    if keyboard_check(ord('A')) {
        angulo = 225;
    }
    else if keyboard_check(ord('D')) {
        angulo = 315;
    }
    else {
        angulo = 270;
    }
}
else {
    if keyboard_check(ord('A')) {
        angulo = 180;
    }
    else if keyboard_check(ord('D')) {
        angulo = 0;
    }
    else {
        angulo = -1;
    }
}
// ejecutar el movimiento para el cuerpo
if angulo != -1 {
    velocidad_x = lengthdir_x(m_velocidad_mover * dlt, angulo);
    velocidad_y = lengthdir_y(m_velocidad_mover * dlt, angulo);
    x += velocidad_x;
    y += velocidad_y;
}

// mover las manos, el for repite el codigo para ambas
var pecho_x, angdif;
for (var i = 0; i &lt; 2; i++) {
    if (i == 0 and (keyboard_check(ord('Q')) or mouse_check_button(mb_left))) or
            (i == 1 and (keyboard_check(ord('E')) or mouse_check_button(mb_right))) {
        // mano sigue al mouse
        distancia = point_distance(mano_x[i], mano_y[i], mouse_x, mouse_y);
        angulo = point_direction(mano_x[i], mano_y[i], mouse_x, mouse_y);
        velocidad_x = lengthdir_x(distancia, angulo);
        velocidad_y = lengthdir_y(distancia, angulo);
        mano_x[i] += min(velocidad_x, m_velocidad_mano) * dlt;
        mano_y[i] += min(velocidad_y, m_velocidad_mano) * dlt;
        // rotacion de mano
        angdif = angle_difference(mano_ang[i], angulo);
        mano_ang[i] -= min(abs(angdif), m_velocidad_rotamano) * sign(angdif) * dlt * 20;
        // esto es un flag para disparar la funcion a continuacion
        movio_solo = true;
    }
    if movio_solo {
        // limitar la distancia de la mano al cuerpo
        pecho_x = x + m_longitud_pecho * sign(i - 0.5);
        distancia = point_distance(pecho_x, y, mano_x[i], mano_y[i]);
        if distancia &gt; m_longitud_brazo + m_longitud_antebrazo {
            angulo = point_direction(pecho_x, y, mano_x[i], mano_y[i]);
            mano_x[i] = pecho_x + lengthdir_x(m_longitud_brazo + m_longitud_antebrazo, angulo);
            mano_y[i] = y + lengthdir_y(m_longitud_brazo + m_longitud_antebrazo, angulo);
        }
    }
}

// actualizar codo izquierdo por metodo estocastico
var codo_vx = codo_x[m_izq];
var codo_vy = codo_y[m_izq];
var error_max = abs(m_longitud_brazo - point_distance(x - m_longitud_pecho, y, codo_vx, codo_vy)) +
    abs(m_longitud_antebrazo - point_distance(mano_x[m_izq], mano_y[m_izq], codo_vx, codo_vy));
var error;
repeat 10 {
    distancia = min(error_max, m_velocidad_codo) * dlt * 10
    distancia = random_range(distancia * 0.5, distancia);
    angulo = random(360);
    codo_vx += lengthdir_x(distancia, angulo);
    codo_vy += lengthdir_y(distancia, angulo);
    error = abs(m_longitud_brazo - point_distance(x - m_longitud_pecho, y, codo_vx, codo_vy)) +
        abs(m_longitud_antebrazo - point_distance(mano_x[m_izq], mano_y[m_izq], codo_vx, codo_vy));
    if error &lt;= error_max {
        error_max = error;
        codo_x[m_izq] = codo_vx;
        codo_y[m_izq] = codo_vy;
    }
    else {
        codo_vx = codo_x[m_izq];
        codo_vy = codo_y[m_izq];
    }
}

// actualizar codo derecho por metodo fisico, reglas basicas
// velocidad para separarse o juntarse de cuerpo
distancia = point_distance(x + m_longitud_pecho, y, codo_x[m_der], codo_y[m_der]);
angulo = point_direction(x + m_longitud_pecho, y, codo_x[m_der], codo_y[m_der]);
velocidad_x = lengthdir_x(m_longitud_brazo - distancia, angulo);
velocidad_y = lengthdir_y(m_longitud_brazo - distancia, angulo);
// velocidad para separarse o juntarse de mano
distancia = point_distance(mano_x[m_der], mano_y[m_der], codo_x[m_der], codo_y[m_der]);
angulo = point_direction(mano_x[m_der], mano_y[m_der], codo_x[m_der], codo_y[m_der]);
velocidad_x += lengthdir_x(m_longitud_antebrazo - distancia, angulo);
velocidad_y += lengthdir_y(m_longitud_antebrazo - distancia, angulo);
// ejecucion del movimiento
codo_x[m_der] += min(velocidad_x, m_velocidad_codo) * dlt * 10;
codo_y[m_der] += min(velocidad_y, m_velocidad_codo) * dlt * 10;

// comandos generales
if keyboard_check(vk_escape) {
    game_end();
}
else if keyboard_check(vk_enter) {
    game_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// cuerpo
draw_sprite_ext(d_cuerpitop, 0, x, y, 1, 1, 0, colorsito[m_izq], 1);
draw_sprite_ext(d_cuerpitop, 0, x, y, -1, 1, 0, colorsito[m_der], 1);

// brazo izquierdo
draw_sprite_ext(d_brazitop, 1, codo_x[m_izq], codo_y[m_izq],
    point_distance(codo_x[m_izq], codo_y[m_izq], x - m_longitud_pecho, y) / m_longitud_brazo, 1,
    point_direction(codo_x[m_izq], codo_y[m_izq], x - m_longitud_pecho, y),
    colorsito[m_izq], 1);
draw_sprite_ext(d_brazitop, 0, mano_x[m_izq], mano_y[m_izq],
    point_distance(mano_x[m_izq], mano_y[m_izq], codo_x[m_izq], codo_y[m_izq]) / m_longitud_antebrazo, 1,
    point_direction(mano_x[m_izq], mano_y[m_izq], codo_x[m_izq], codo_y[m_izq]),
    colorsito[m_izq], 1);
draw_sprite_ext(d_manitop, 0, mano_x[m_izq], mano_y[m_izq],
    1, 1, mano_ang[m_izq], colorsito[m_izq], 1);

// brazo derecho
draw_sprite_ext(d_brazitop, 1, codo_x[m_der], codo_y[m_der],
    point_distance(codo_x[m_der], codo_y[m_der], x + m_longitud_pecho, y) / m_longitud_brazo, 1,
    point_direction(codo_x[m_der], codo_y[m_der], x + m_longitud_pecho, y),
    colorsito[m_der], 1);
draw_sprite_ext(d_brazitop, 0, mano_x[m_der], mano_y[m_der],
    point_distance(mano_x[m_der], mano_y[m_der], codo_x[m_der], codo_y[m_der]) / m_longitud_antebrazo, 1,
    point_direction(mano_x[m_der], mano_y[m_der], codo_x[m_der], codo_y[m_der]),
    colorsito[m_der], 1);
draw_sprite_ext(d_manitop, 0, mano_x[m_der], mano_y[m_der],
    1, 1, mano_ang[m_der], colorsito[m_der], 1);

// testo para GUI
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_text_transformed_colour(12, 12,
    "BRAZITOP, por Omwekiatl 2021##Mover: W,A,S,D#Mover: flechas#Brazos: Q,E#Brazos: clics#Restart: Enter",
    1, 1, 0, c_maroon, c_maroon, c_maroon, c_maroon, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
